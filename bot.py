from aiogram import Bot, Dispatcher, executor, types
import logging
import random

import config
import messages as mes
import keyboards as kb

# –ü–æ–¥–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger('GARANTBOT')

# –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º –±–æ—Ç–∞
bot = Bot(token=config.API_TOKEN, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot)

@dp.message_handler(commands=['start'])
async def start_message(message):
	await message.answer(mes.start_message, reply_markup=kb.reviewBtn)

@dp.message_handler(content_types=["text"])
async def send_mes(message: types.Message):
	user_id = message.from_user.id
	text = message.text

	if text == '‚ùå –û—Ç–º–µ–Ω–∞' or text == '‚óÄÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
		await start_message(message)
		return
	
	if text == 'ü•ù QIWI':
		comment = str(user_id) + '_' + str(random.randint(1111, 5000))
		await message.answer(mes.qiwi_message.format(config.QIWI_ACCOUNT, comment), reply_markup=kb.checkPayMenu)
		return
	
	if text == 'üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞ (–í–†–ï–ú–ï–ù–ù–û –ù–ï –î–û–°–¢–£–ü–ù–û)':
		comment = str(user_id) + '_' + str(random.randint(11111, 99999))
		await message.answer(mes.card_message.format(config.CARD_NUMBER, comment), reply_markup=kb.checkPayMenu)
		return

	if text == 'üìÄ BITCOIN (–ù–ï –î–û–°–¢–£–ü–ù–û)':
		await message.answer(mes.btc_message.format(config.BTC_ADDRESS), reply_markup=kb.checkPayMenu)
		return

	if text == 'üíé –Ø –æ–ø–ª–∞—Ç–∏–ª':
		await message.answer(mes.post_pay_message, reply_markup=kb.checkPayMenu)
		return

	if len(text) <= 11 and len(text) >= 6:
		try:
			sec_user_id = int(text)
			await message.answer(f'–¢–µ–ø–µ—Ä—å –æ–ø–ª–∞—Ç–∏—Ç–µ –Ω—É–∂–Ω—É—é —Å—É–º–º—É!\n–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {sec_user_id} –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ, –ø–µ—Ä–µ–π–¥—è –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –æ–Ω —Å–º–æ–∂–µ—Ç –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–≤–∞—Ä', reply_markup=kb.paymentsMenu)
		except Exception as e:
			await message.answer('–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID')
	else:
		await message.answer('–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∏–ª–∏ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, –Ω–∞–∂–º–∏—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞')


if __name__ == '__main__':
	executor.start_polling(dp, skip_updates=True)